generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["dataProxy"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_MIGRATE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  sleeps        Sleep[]
  meals         Meal[]
  nutritions    Nutrition[]
  exercises     Exercise[]
  activitys     Activity[]
  screenTimes   ScreenTime[]
  dailys        Daily[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Sleep {
  id                       String   @id @default(uuid())
  date                     DateTime
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bedTime                  DateTime
  wakeTime                 DateTime
  restingHeartRate         Int
  heartRateVariability     Int
  respitoryRate            Float
  bodyTemperature          Float
  sleepScore               Int
  notes                    String               
}

model Meal {
  id                       String   @id @default(uuid())
  date                     DateTime
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  time                     DateTime
  caption                  String
}

model Nutrition {
  id                       String   @id @default(uuid())
  date                     DateTime
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  dietaryRestriction       Boolean
  timeRestriction          Boolean
  caloricRestriction       Boolean
  notes                    String
}

model Exercise {
  id                       String   @id @default(uuid())
  date                     DateTime
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startTime                DateTime
  type                     String
  mode                     String
  duration                 DateTime
  avgHeartRate             Int
  maxHeartRate             Int
  caloriesBurned           Int
  notes                    String
}

model Activity {
  id                       String   @id @default(uuid())
  date                     DateTime
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  caloresBurned            Int
  exerciseMinutes          Int
  standHours               Int
  steps                    Int
  flights                  Int
  activityScore            Int
  inactiveTime             DateTime
}

model ScreenTime {
  id                       String   @id @default(uuid())
  date                     DateTime
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalPhoneScreenTime     DateTime
  timeInSocialApps         DateTime
  phonePickups             Int
  notificationsReceived    Int
}

model Daily {
  id                       String   @id @default(uuid())
  date                     DateTime
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
  userId                   String
  user                     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags                     String
  oneLineADay              String
  weight                   Float
  restorativeTime          Int
  highlight                String
  highlightAccomplished    Boolean
}